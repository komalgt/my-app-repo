// Code Generated by Sidekick is for learning and experimentation purposes only.
@Library('jenkins-shared-libraryy') _

pipeline {

    agent any

    environment {
        AWS_REGION      = 'eu-north-1'
        AWS_CREDS       = 'aws-creds'
        LAMBDA_FUNCTION = 'hello_world_lambda'
        S3_BUCKET       = 'bucket-new-9164'
        ARTIFACT_PATH   = 'build/myfunction.zip'
        S3_KEY          = 'myfunction.zip'
        ECS_CLUSTER     = 'jenkins-cluster'
        ECS_SERVICE     = 'jenkins-service'
        ECS_IMAGE       = 'komalgt/myimage:latest'
    }

    stages {

        stage('Checkout Source') {
            steps {
                checkout scm
            }
        }

        stage('Build Lambda Artifact') {
            steps {
                script {
                    // Ensure build directory exists
                    sh 'mkdir -p build'

                    // Package Lambda source code -- adjust path if needed!
                    // If you use dependencies, add a pip install step before zipping
                    sh '''
                        zip -r ${ARTIFACT_PATH} lambda_function_code/*
                    '''

                    // Show contents for debugging
                    sh 'ls -lh build/'
                }
            }
        }

        stage('Upload Lambda Artifact to S3') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: env.AWS_CREDS]]) {
                    // Double check file presence before upload
                    sh 'ls -lh ${ARTIFACT_PATH}'

                    sh """
                        aws s3 cp ${ARTIFACT_PATH} s3://${S3_BUCKET}/${S3_KEY} --region ${AWS_REGION}
                    """
                }
            }
        }

        stage('Lambda Deploy') {
            steps {
                deployLambda(
                    functionName: env.LAMBDA_FUNCTION,
                    s3Bucket: env.S3_BUCKET,
                    s3Key: env.S3_KEY,
                    awsRegion: env.AWS_REGION,
                    awsCredentialsId: env.AWS_CREDS
                )
            }
        }

        stage('ECS Deploy') {
            steps {
                deployECS(
                    cluster: env.ECS_CLUSTER,
                    service: env.ECS_SERVICE,
                    image: env.ECS_IMAGE,
                    awsRegion: env.AWS_REGION,
                    awsCredentialsId: env.AWS_CREDS
                )
            }
        }

    }

    post {
        always {
            archiveArtifacts artifacts: 'build/myfunction.zip', onlyIfSuccessful: true
            cleanWs()
        }
    }
}
